//namespace: instruct

/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     Chris van Run

DESCRIPTION:

Provides a page object to show to the participant during test phase trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2012-03-20 TV   Created.
2014-05-26 CvR	Adapated.

\******************************************************************************/

import std_sound_output_device;

Page test_page
{
    TestItem    	item;
    string			sequence; //is emptied in loops while presenting the audio

    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }

	on_event:message()
    {
        // Process button-box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }
    
    on_event:key_press()
    {
          // Handle left-shift (A) and right-shift (B).
        if (input_key == KEY_Shift_L)
            response.process_hit(0, event_time);
        else if (input_key == KEY_Shift_R)
            response.process_hit(1, event_time);
        else
			handle_special_key(this, input_key, input_modifiers);
    }


    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }

		CanvasGadget canvas
		{	
			init()
			{
				fill_pattern_color = TEST_PAGE_COLOR;
                size = 800, 800;
                offset_x = width / 2;
                offset_y = height / 2;
			}
			
			TextShape ok
			{				
				init()
				{
					font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment = ALIGN_CENTER;
                    ver_alignment = ALIGN_CENTER;
                    
					text = STIMULUS_TEXT; //"OK" or "REPEAT"
					
					is_visible = false;
				}
			}
			
			ImageShape sound_playing
			{   
				dur fade_in_dur;
				int num_frames_fade_in; 				
				pre_update()
				{
					if(relative_frame < num_frames_fade_in )
					{
						this.alpha = real(relative_frame)/real(num_frames_fade_in);
					}
				}
				
				init() //test_window1
				{	
                    width = 100;
                    height = 100;
					x = -width/2;
					y = -height/2;
                    image = stimuli_dir() + "audioicon.svg";
 
                    is_visible = false;
                    fade_in_dur = FADE_PERIODE_AUDIOICON;
					num_frames_fade_in = int(fade_in_dur/display_device.refresh_interval); 	
				}
			}
			
			CircleShape buttonA
			{
				color unpressed_line_pattern_color = color:black;
				color pressed_line_pattern_color = color:red;
				color unpressed_fill_pattern_color = color:slateblue;
				color pressed_fill_pattern_color = color:black;
				
				init()
				{
					x = -150; y = 200;
					radius = 30;
	 
					line_width = 3;
	 
					line_pattern_color =unpressed_line_pattern_color;
	 
					fill_pattern_color = unpressed_fill_pattern_color;
	 
					is_visible = true;
				}
				
				void pressed()
				{
					if(line_pattern_color == unpressed_line_pattern_color)
					{
						line_pattern_color = pressed_line_pattern_color;
						fill_pattern_color = pressed_fill_pattern_color;
					}
					else
					{
						line_pattern_color = unpressed_line_pattern_color;
						fill_pattern_color = unpressed_fill_pattern_color;
					}
				}
				
				Timer timer { expire() { pressed();}}
			}
				
			CircleShape buttonB
			{	
				color unpressed_line_pattern_color = color:black;
				color pressed_line_pattern_color = color:red;
				color unpressed_fill_pattern_color = color:darkorange; 
				color pressed_fill_pattern_color = color:black;
							
				init()
				{
					x = 150; y = 200;
					radius = 30;
	 
					line_width = 3;
	 
					line_pattern_color = unpressed_line_pattern_color;
	 
					fill_pattern_color = unpressed_fill_pattern_color;
	 
					is_visible = true;
				}
				
				void pressed()
				{
					if(line_pattern_color == unpressed_line_pattern_color)
					{
						line_pattern_color = pressed_line_pattern_color;
						fill_pattern_color = pressed_fill_pattern_color;
					}
					else
					{
						line_pattern_color = unpressed_line_pattern_color;
						fill_pattern_color = unpressed_fill_pattern_color;
					}
				}
				Timer timer { expire() { pressed();}}
			}
		}
		
        void reset()
        {
            full_abort();
			audio.abort();
        }
    }
    
	Timer stimulus
	{
		string token;
		
		on_event:expire()
		{
			if(sequence != "") //if the sequence hasn't ran out...
			{				
				token = substring(sequence,0,1); //pick the left most token in the sequence and...
				sequence = substring(sequence,1,length(sequence)-1); // shorten sequence
				
				// play the sound
				audio.abort(); //stop any previous playing sounds
				audio.clip.file = stimuli_dir() + "sounds/practice/" + token + ".wav"; // i.e. ./stimuli/sounds/A.wav
				audio.start();
				
				// restart timer with the correct stimulus duration
				this.start(this.expire_time + STIMULUS_DURATION + INTERSTIMULUS_INTERVAL);
			} 
		}
	}
	
	SoundChain audio
	{
		SoundFile clip {}
		SoundPlayback playback {}
	}	

    Response response
    {
        // Response data.
        string  	value;          // value: entered tokens
        int			rt_complete;             // response time [ms]
        
        int[..]		rts;
        int			rt_ind;
        int    		correct;        // correct response: 0=no, 1=yes, -1=n.a.
		
		on_event:start()
		{
			 test_page_overlay.show_prompt(PRACTICE_RESPONSE_OVERLAY_TEXT);
		}
		
        void clear()
        {
            value = "";
            rt_complete = -9999;
            rts.size = MAX_NUMBER_OF_RESPONSES + 1;
            rt_ind = 0;
            correct = -1;
        }

		void process_hit(int val, time t)
		{
			if(val == 0) // 0
			{
				process_hit("0", t);
				if(!layout.canvas.buttonA.timer.is_running)
				{
					layout.canvas.buttonA.pressed();
					layout.canvas.buttonA.timer.start(t+PRAC_BUTTON_SHOW_PRESSED_DUR);
				}
			}
			else if(val == 1) // 1
			{
				process_hit("1", t);
				if(!layout.canvas.buttonB.timer.is_running)
				{
					layout.canvas.buttonB.pressed();
					layout.canvas.buttonB.timer.start(t+PRAC_BUTTON_SHOW_PRESSED_DUR);
				}
			}
		}
		
        void process_hit(string val, time t)
        {
			HitType validity = hit(t);
 
            // Accept the first hit in the response interval and end the
            // response interval.
            if (validity == HIT_VALID)
            {
                //value
                value = value + val;
                
                //rt
                int rt = int(reaction_time(0));
                rt_ind = rt_ind + 1;
                if(rt_ind >= MAX_NUMBER_OF_RESPONSES)
					println("ERROR: max number of responses is reached! Further RT not recorded. Max#: " + MAX_NUMBER_OF_RESPONSES + "!");
				else
						rts[rt_ind] = rt;
				
				//correct		
                correct = (substring(value, 0, length(item.tokens)) == item.tokens) ? 1 : 0; // 1 is correct
                if(correct == 1)
					rt_complete = rt;
				if(length(value) >= length(item.tokens)) // if the response is at or beyond the token length. Display correctness.
				{
					real correctness = correct ? 1 : -1;
					test_page_overlay.show_feedback(correctness);
					layout.canvas.ok.text = INTER_TRAIL_TEXT;
				}
            }
            else if (validity == HIT_TOO_EARLY)
            {
                // False alarm. Deal with this if desired.
                test_page_overlay.show_prompt(TO_EARLY_BUTTON_PRESS_TEXT);
            }
        }
		
        on_event:finish()
        {
			println("Correct: " + correct);
			test_page_overlay.hide_feedback();
			layout.canvas.ok.text = INTER_TRAIL_TEXT;
			done(CONTINUE);
        }
        
        on_event:message()
        {
            done(CONTINUE);
        }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
         // Just in case; abort presentation if still active
        layout.reset();
		
        signal_target(msgid);   // tell caller we're done
        target = null;
        
        control.target = null;
        control.button_box.disable_buttons();

        control.clear_status();
    }


    //==========================================================================

    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false, string overlay_text = "")
    {
        test_page_overlay.setup(this);
        
        // Show or hide prompt.       
        test_page_overlay.show_prompt(pr ? 
             overlay_text : "");
             
        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false
              
        //audio settings
        audio.playback.device = sound_output_device;
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();
        target = null;
        
        control.button_box.disable_buttons();
        control.target = null;
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        test_page_overlay.show_prompt(PRACTICE_STIMULI_OVERLAY_TEXT);
        
        //set test_page variables
        item = it;
        sequence = item.tokens;
        
        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);

        // Reset response data.
        response.clear();
        
          // Enable button-box buttons.       
        control.target = this;
        control.button_box.disable_buttons();
          
        control.button_box.enable_button(0, 0); // button 0 means A
        control.button_box.enable_button(2, 1); // button 1 means B

		//stimulus
        dur stimulus_duration = ( (STIMULUS_DURATION + INTERSTIMULUS_INTERVAL) * length(item.tokens) );
        time stimoffset = tref + stimulus_duration;
        stimulus.start(tref);
        layout.canvas.sound_playing.start(tref-FADE_PERIODE_AUDIOICON, stimulus_duration); //show visual queues
		
        // Response interval starts at stimulus offset + STIM_RESP_INTERVAL. 
        // Timeout after RESPONSE_DURATION unless this duration is 0s or less.
        layout.canvas.ok.text = STIMULUS_TEXT;
        response.start(stimoffset, RESPONSE_DURATION);
        layout.canvas.ok.start(stimoffset, RESPONSE_DURATION); //show visual queues


        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);


        // Update status line on control window. Cleared in done() above.
        control.set_status(item.tokens);


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
