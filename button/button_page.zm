/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     Chris van Run

DESCRIPTION:

Provides a page object to show to the participant during test phase trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2012-03-20 TV   Created.
2014-05-26 CvR  Adapated.
2017-01-10 MD   Adapted.
\******************************************************************************/

import std_sound_output_device;

// Boolean to control whether or not one want to see the picture while
// the audio is playing.
const bool  DISPLAY_AUDIO_PICTURE           = true;

// The duration of how long a button appears in the  PRESSED colors.
const dur   CLICK_TIME                      = 250ms;

// Colors of the button during while it is pressed or not.
// colors are int ARGB or RGB colors.
const color UNPRESSED_LINE_PATTERN_COLOR    = rgbi:0/0/0;
const color UNPRESSED_FILL_PATTERN_COLOR    = rgbi:64/0/0/0;
const color PRESSED_LINE_PATTERN_COLOR      = rgbi:0/0/0;
const color PRESSED_FILL_PATTERN_COLOR      = rgbi:128/0/0/0;


Page button_page
{
    bool    continue_pressed = false;
    string  overlay_text = "";
    bool    show_prompt;

    on_event:init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }

    on_event:message()
    {
        // Process button-box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }
    
    on_event:key_press()
    {
          // Handle left-shift (A) and right-shift (B).
        if (input_key == KEY_Shift_L)
            response.process_hit(0, event_time);
        else if (input_key == KEY_Shift_R)
            response.process_hit(1, event_time);
        else
            handle_special_key(this, input_key, input_modifiers);
    }

    VerticalLayout layout
    {
        on_event:init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }

        CanvasGadget canvas
        {       
            on_event:init()
            {
                fill_pattern_color = TEST_PAGE_COLOR;
                size = 800, 800;
                offset_x = width / 2;
                offset_y = height / 2;
            }

            TextShape ok
            {
                on_event:init()
                {
                    font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment = ALIGN_CENTER;
                    ver_alignment = ALIGN_CENTER;

                    text = STIMULUS_TEXT; //"OK" or "REPEAT"

                    is_visible = false;
                }
            }

            ImageShape sound_playing
            {   
                dur fade_in_dur;
                int num_frames_fade_in;                                 
                
                //enables a fade in (makes the onset slightly more nicer).
                pre_update() 
                {
                    if(relative_frame < num_frames_fade_in )
                    {
                        this.alpha = real(relative_frame)/real(num_frames_fade_in);
                    }
                    else {
                        this.alpha = 255;
                    }
                }

                on_event:init() 
                {       
                    width = 100;
                    height = 100;
                    x = -width/2;
                    y = -height/2;
                    image = stimuli_dir() + "audioicon.svg";

                    is_visible = false;
                    fade_in_dur = FADE_PERIODE_AUDIOICON;
                    num_frames_fade_in = int(
                            fade_in_dur/display_device.refresh_interval
                            );
                }
            }

            CircleShape buttonA
            {

                on_event:init()
                {
                    x = -150; y = 200;
                    radius = 30;
                    line_width = 3;
                    line_pattern_color = UNPRESSED_LINE_PATTERN_COLOR;
                    fill_pattern_color = UNPRESSED_FILL_PATTERN_COLOR;
                    is_visible = true;
                }

                void pressed()
                {
                    if(fill_pattern_color == UNPRESSED_FILL_PATTERN_COLOR)
                    {
                        line_pattern_color = PRESSED_LINE_PATTERN_COLOR;
                        fill_pattern_color = PRESSED_FILL_PATTERN_COLOR;
                    }
                    else
                    {
                        line_pattern_color = UNPRESSED_LINE_PATTERN_COLOR;
                        fill_pattern_color = UNPRESSED_FILL_PATTERN_COLOR;
                    }
                }

                Timer timer
                {
                    on_event:expire()
                    {
                        pressed();
                    }
                }
            }

            TextShape button_a_text
            {
                on_event:init()
                {
                    text        = "A";
                    is_visible  = true;
                    font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size   = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color = rgbi:0/0/0;
                    x           = -150 - string_width(text)/2;
                    y           = 200 - string_height(text)/2;
                }
            }

            CircleShape buttonB
            {   
                on_event:init()
                {
                    x = 150; y = 200;
                    radius = 30;
                    line_width = 3;
                    line_pattern_color = UNPRESSED_LINE_PATTERN_COLOR;
                    fill_pattern_color = UNPRESSED_FILL_PATTERN_COLOR;
                    is_visible = true;
                }

                void pressed()
                {
                    if(fill_pattern_color == UNPRESSED_FILL_PATTERN_COLOR)
                    {
                        line_pattern_color = PRESSED_LINE_PATTERN_COLOR;
                        fill_pattern_color = PRESSED_FILL_PATTERN_COLOR;
                    }
                    else
                    {
                        line_pattern_color = UNPRESSED_LINE_PATTERN_COLOR;
                        fill_pattern_color = UNPRESSED_FILL_PATTERN_COLOR;
                    }
                }

                Timer timer
                {
                    on_event:expire()
                    {
                        pressed();
                    }
                }
            }
            
            TextShape button_b_text
            {
                on_event:init()
                {
                    text        = "B";
                    is_visible  = true;
                    font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size   = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color = rgbi:0/0/0;
                    x           = 150 - string_width(text)/2;
                    y           = 200 - string_height(text)/2;
                }
            }
        }

        ButtonGadget continue_button
        {
            on_event:init()
            {
                text                = CONTINUE_BUTTON_TEXT;
                font_family         = TEST_PAGE_BUTTON_FONT_FAMILY;
                fill_pattern_color  = TEST_PAGE_BUTTON_COLOR;
                text_color          = TEST_PAGE_BUTTON_TEXT_COLOR;
                font_size           = TEST_PAGE_BUTTON_FONT_SIZE;
            }

            on_event:activate()
            {
                done(CONTINUE);
                continue_pressed = true;
            }
        }

        // start a click animation.
        void button_click(int val, time t)
        {
            if (val == 0) // A
            {
                canvas.buttonA.pressed();
                canvas.buttonA.timer.start(t + CLICK_TIME);
            }
            else if (val == 1) // B
            {
                canvas.buttonB.pressed();
                canvas.buttonB.timer.start(t + CLICK_TIME);
            }
            else {
                println("Error wrong button click.");
            }
        }

        void reset()
        {
            // kill all timers or players
            full_abort();
            audio.abort();
        }

    }

    SoundChain audio
    {
        SoundFile clip {}
        SoundPlayback playback {}

        on_event:finish()
        {
            done(CONTINUE);
        }
        
        void play(time t, string fn)
        {
            playback.device = sound_output_device;
            clip.file = stimuli_dir() + "sounds/" + fn;
            start(t);
        }
    }   
    
    Response response
    {
        // Response data.

        void process_hit(int val, time t)
        {
            HitType validity = hit(t);
            int value;  // value: entered tokens A(0) B(1)

            // Accept the hits and save the reaction times
            if (validity == HIT_VALID)
            {
                //value
                value = val;
                int rv = -1;
                string fn = "";

                layout.button_click(val, t);

                if (value == 0)// A pressed
                {
                    rv = random(0, items_a.size);
                    fn = items_a[rv].fn;
                }
                else if (value == 1) // B pressed
                {
                    rv = random(0, items_b.size);
                    fn = items_b[rv].fn;
                }
                else
                    println("(Programming) Error wrong button pressed.");
                
                audio.play(t + 50ms, fn);
                if (DISPLAY_AUDIO_PICTURE)
                    layout.canvas.sound_playing.start(
                            audio.expected_start_time,
                            audio.duration
                            );

                control.button_box.disable_buttons();
                
                ignore_remaining_hits();
            }
        }
    }

    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active
        layout.reset();
                
        signal_target(msgid);   // tell caller we're done
        target = null;
        control.target = null;
        control.button_box.disable_buttons();

        control.clear_status();
    }


    //==========================================================================

    // Performs preparatory work required before using this page.
    void setup(bool fb=false, bool pr=true, string overlay_text = "")
    {
        button_page.overlay_text = overlay_text;
        show_prompt = pr;
        test_page_overlay.setup(this);
        
        // Show or hide prompt.       
        test_page_overlay.show_prompt(pr ? overlay_text : "");
             
        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(-1);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false
    }

    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();
        target = null;
        
        control.button_box.disable_buttons();
        control.target = null;
    }

    // Starts a trial.
    void action(Object caller, time tref)
    {        
        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);

        response.start(now());
                
        // Enable button-box buttons 0 and 1 for resp. A and B (or C and D)
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(0, 0); // button 0 means A
        control.button_box.enable_button(2, 1); // button 1 means B
        
        // Update status line on control window. Cleared in done() above.
        control.set_status("pressing button phase");

        test_page_overlay.update_progress_bar(0);
        if (show_prompt)
            test_page_overlay.show_prompt(overlay_text);

        // Remember who to signal when the trial is over.
        target = caller;
    }
}
